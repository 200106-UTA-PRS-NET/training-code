MVC
	Model
	View
	Controller

Host->Server
	IIS- Microsoft propriotery server
	Kestrel - This is the platform independent server (which can be hosted to windows, macOS, linux based)

Controller 
	class which inherits Controller (namespace -> Microsoft.AspNetCore.Mvc)
	this class has Controller as suffix which distinguishes between a regular class and a controller class
	Controller have action methods which are called to handle requests Eg: give me an Index view.
		Action Methods can have different ActionResults which are implementation classes for IActionResult
			IActionResult
				ActionResult
					ViewResult
						View() -> returns a view or a template or an html

					PartialViewResult
						PartialView() -> view within a view
				JsonResult
					Json()
				FileContentResult
					File()
				ContentResult
					Content() -> String				

Whenever a request is placed the controller looks for the Action method (which returns the view most of the time). This process of looking after appropriate view in the folder 
named after controller is known as View Discovery.
View Discovery
	if the name of ActionMethod matches with the View name (.cshtml)
	if the Action method explicitly mentions the name of the view and it looks for that view in that folder (on the name of controller)
		or 
	in shared folder

Layout View : shares the common html accross all the views 
	@RenderBody
	@RenderSection

Passing Data
	Controller to View
		ViewBag
		ViewData
		Model
		
Views : they are the pages visible to Users. In Asp.Net Core View Engine (Razor) renders the page 
	Types of Views
		1. Layout View
		2. Weakly Typed View
		3. Strongly Typed View
		4. Static view : plain html with no data
		5. Partial Views : a small part of the page for reusability or to make code simple
		6. Dynamic Views: Views which are strongly typed but not explicitly tied to the model

Views as Forms:
Razor Syntax
	Razor Expressions @Model, @if(){}
	Razor Blocks @{
		// code in C#
		}
	To create views there are various ways	:
		1. Plain HTML
		2. HTML Helper methods - which has helper methods which generate html elements with name and id attribute
		3. Tag Helpers



Model binding - a system that binds all the values which are required for Action of type [HttpPost] into its parameter
	1. Route
	2. QueryString
	3. FormCollection
	4. File

Routing:
	Conventional Routing: the routes are configured in StartUp.cs with a pattern
	Attribute Based Routing : the routes are applied as Attributes on Controller/Action
	
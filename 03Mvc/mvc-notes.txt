MVC
	Model
	View
	Controller

MVC
    request -> controller (logic) -> model (db) -> view (design) -> ... -> response
    decoupled / separation of concern
    therefore testable because also all c# classes
Host->Server
	IIS- Microsoft propriotery server
	Kestrel - This is the platform independent server (which can be hosted to windows, macOS, linux based)

Controller 
	class which inherits Controller (namespace -> Microsoft.AspNetCore.Mvc)
	this class has Controller as suffix which distinguishes between a regular class and a controller class
	Controller have action methods which are called to handle requests Eg: give me an Index view.


before ASP.NET MVC we had ASP.NET Web Forms.
    e.g. File.aspx
        another kind of html with template
        too much in one file: devs, DBAs and others are all working on it.
        tightly coupled


controller depends on view and model
view depends on just model
model depends on nothing
    part of separation of concerns; testability

		Action Methods can have different ActionResults which are implementation classes for IActionResult
			IActionResult
				ActionResult
					ViewResult
						View() -> returns a view or a template or an html

					PartialViewResult
						PartialView() -> view within a view
				JsonResult
					Json()
				FileContentResult
					File()
				ContentResult
					Content() -> String				

Whenever a request is placed the controller looks for the Action method (which returns the view most of the time). This process of looking after appropriate view in the folder 
named after controller is known as View Discovery.
View Discovery
	if the name of ActionMethod matches with the View name (.cshtml)
	if the Action method explicitly mentions the name of the view and it looks for that view in that folder (on the name of controller)
		or 
	in shared folder

Layout View : shares the common html accross all the views 
	@RenderBody
	@RenderSection

Passing Data
	Controller to View
		ViewBag
		ViewData
		Model
		
Views : they are the pages visible to Users. In Asp.Net Core View Engine (Razor) renders the page 
	Types of Views
		1. Layout View
		2. Weakly Typed View
		3. Strongly Typed View
		4. Static view : plain html with no data
		5. Partial Views : a small part of the page for reusability or to make code simple
		6. Dynamic Views: Views which are strongly typed but not explicitly tied to the model

models should be strongly typed. that gives us the benefit of type checking and intellisense in the view.

Views as Forms:
Razor Syntax
	Razor Expressions: start with @ character. like @DateTime.Now
       	 it does its best to infer where the expression truly begins and ends.
       	 if that's not good enough, then you can be explicit and use @(DateTime.Now)
       	 whatever the expression returns, put that on the page as a string.
    	these are HTML encoded automatically for us. e.g. any string containing <> will show up as &lt;&gt;. @Model, @if(){}
	Razor Blocks: @ {  } runs logic or sets variables, doesn't by itself put things on the page.
        	we have @if else if, @switch, @for, @foreach
    	comments @* *@
		 @{
		// code in C#
		}
	@model directive - what model will this view be strongly typed to?

	To create view (special forms)s there are various ways	:
		1. Plain HTML
		2. HTML Helper methods - which has helper methods which generate html elements with name and id attribute
		3. Tag Helpers
	https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro#tag-helpers-compared-to-html-helpers

form tag helper
    includes anti-forgery token to prevent a malicious website from getting your browser to make requests to my website.
    makes every form submission i receive require it to send also a unique token that i put on that copy of the form when i made it.
	label tag helper <label asp-for="Name">, the label for some value (html helper - labelfor)
	input tag helper
	    <input asp-for="Name" /> same as @Html.EditorFor(m => m.Name) or displayfor
	validation tag helper - for client-side validation (and the results of server-side validation when form is rejected).
	    <span asp-validation-for="">. html helper: Html.ValidationMessageFor
		leverages jquery to display validation error messages and prevent the form from being submitted.
		validation summary tag and html helpers -
		select tag helper and Html.DropDownListFor
	                 asp-for="Country" asp-items="Model.Countries"
  		  you give it the list of all, and also the property to put the currently selected one in.
  		  the list should be List<SelectListItem> property on the model.
  	  it's possible to get the items from an enum as well, can search how to do that.
	a (anchor) tag helper (or Html.ActionLink)
   		 asp-controller, asp-action, asp-route-{name}
    	link to a specific route / controller / action in your application
	we don't need to say "Model." with asp-for, but we do for most of the other tag helpers.

still need server side validation because user could have javasript disabled or be malicious.
ultimately, client-side validation is more for user experience. faster error, don't need to submit the form to see it didn't work.

DataAnnotations
    required (non-nullable types are already required)
    emailaddress
    datatype
    range
    stringlength
    regularexpression

we can add our own validationattribute classes

any errors detected server-side during model binding show up in ModelState of the controller

Model binding - a system that binds all the values which are required for Action of type [HttpPost] into its parameter
	1. Route
	2. QueryString
	3. FormCollection
	4. File

Routing:
	Conventional Routing: the routes are configured in StartUp.cs with a pattern	
	        tried in order, fallback, so the default and most general one should go last
	        we name them, so we can reference them with html helpers or tag helpers to generate 	
	Attribute Based Routing : the routes are applied as Attributes on Controller/Action
	        more precise control
	        can use [controller], [action], [route]
	        can have multiple routes that all work
	    you can mix them


dependency injection using registered services
    adddbcontext (scoped)
    singleton
    scoped (request)
    transient (new one every class)

	filters https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters
    authorization filters - control access
    resource filters - implement caching
    (then model binding happens)
    action filters - run just before or just after the action method to manipulate inputs or result
        can do server-side validation here in just one place
    exception filters - handle exceptions thrown at any previous step
        alternative to error-handling middleware, which is put in startup.cs and is global
    result filter - just before & just after preparing the result to be sent and sending it
[HttpPost] attribute

model binding
    [bindnever]
    [fromquery]
    [fromroute]
    [frombody]
    [bind]

test controllers https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/testing

Moq video
https://youtu.be/Krj3-h198KQ


example for using hidden fields with collections nested inside a model:

<form asp-action="Post">
    @for (int i = 0; i < Model.Count; i++)
    {
        @Html.Hidden($"items[{i}].Id", Model[i].Id)
        @Html.Hidden($"items[{i}].Name", Model[i].Name)
    }
    <input type="submit" value="Post" class="btn btn-default" />
</form>

well actually in that case the model IS a collection
i don't remember why it has items[i] instead of just [i] which would work for sure
    maybe i was model binding to a parameter named `items`

https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding

MVC crash course:
- model, view, controller [https://docs.microsoft.com/en-us/aspnet/core/mvc/views] [https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers]
- its overall lifecycle (including middleware, routing, filters, action methods, model binding, result execution) [https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters]
- Razor syntax (expressions, blocks, tag helpers, HTML helpers) [https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor, https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers]
- validation (client-side, server-side, ModelState, Data Annotations) [https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation]
- dependency injection [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection, the first half]
- (anything about Razor Pages can pretty much be ignored)

Week 3 help links:
https://developer.mozilla.org/en-US/docs/Web
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input

https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app
https://docs.microsoft.com/en-us/aspnet/core/mvc/overview

https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets

"right way" to do database seeding https://docs.microsoft.com/en-us/ef/core/modeling/data-seeding

https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation
https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro#tag-helpers-compared-to-html-helpers
https://docs.microsoft.com/en-us/aspnet/core/mvc/views/working-with-forms

https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters